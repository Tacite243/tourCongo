// G√©n√®re le client Prisma JS pour interagir avec la base de donn√©es
generator client {
  provider = "prisma-client-js"
}

// D√©clare la source de donn√©es PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Stock√©e dans le fichier .env
}

// üé≠ Enum√©ration des r√¥les utilisateur
enum Role {
  USER         // Utilisateur classique
  ADMIN        // Administrateur de la plateforme
  SUPER_ADMIN  // Acc√®s total (niveau syst√®me)
}

// üë§ Utilisateur de la plateforme (peut √™tre h√¥te ou voyageur)
model User {
  id           String      @id @default(cuid())           // Identifiant unique g√©n√©r√© automatiquement
  email        String      @unique                        // Email unique (login principal)
  password     String                                     // Mot de passe (hach√© c√¥t√© backend)
  name         String?                                    // Nom complet (optionnel)
  avatarUrl    String?                                    // URL de l‚Äôimage de profil
  phone        String?                                    // Num√©ro de t√©l√©phone (optionnel)
  bio          String?                                    // Br√®ve pr√©sentation (facultative)
  role         Role        @default(USER)                 // R√¥le attribu√© par d√©faut
  createdAt    DateTime    @default(now())                // Date de cr√©ation du compte
  updatedAt    DateTime    @updatedAt                     // Mise √† jour automatique

  // üîó Relations
  listings         Listing[]                              // Logements cr√©√©s par l'utilisateur
  bookings         Booking[]                              // R√©servations effectu√©es
  reviews          Review[]                               // Avis post√©s sur d'autres logements
  messagesSent     Message[] @relation("MessagesSent")    // Messages envoy√©s √† d'autres utilisateurs
  messagesReceived Message[] @relation("MessagesReceived")// Messages re√ßus
  favorites        Favorite[]                             // Logements ajout√©s en favori
  notifications    Notification[]                         // Notifications re√ßues
  verification     Verification?                          // Donn√©es de v√©rification d'identit√© (pi√®ces, etc.)
}

// üè† Logement propos√© √† la location
model Listing {
  id           String       @id @default(cuid())          // Identifiant unique
  title        String                                     // Titre de l'annonce
  description  String                                     // Description d√©taill√©e du logement
  type         String                                     // Type de logement (maison, appart, studio‚Ä¶)
  price        Float                                      // Prix par nuit
  address      String                                     // Adresse compl√®te
  city         String                                     // Ville
  country      String                                     // Pays
  latitude     Float                                      // Coordonn√©e GPS - Latitude
  longitude    Float                                      // Coordonn√©e GPS - Longitude
  amenities    String[]                                   // Liste des √©quipements (wifi, TV, etc.)
  rules        String?                                    // R√®gles de la maison (optionnel)
  maxGuests    Int                                        // Nombre maximum de voyageurs
  bedrooms     Int                                        // Nombre de chambres
  bathrooms    Int                                        // Nombre de salles de bain

  // üîó Lien avec l'h√¥te
  host         User        @relation(fields: [hostId], references: [id]) // Propri√©taire de l'annonce
  hostId       String

  // üîó Autres relations
  photos       Photo[]                                   // Galerie photo du logement
  availability Availability[]                            // P√©riodes de disponibilit√©
  bookings     Booking[]                                 // R√©servations effectu√©es sur ce logement
  reviews      Review[]                                  // Avis laiss√©s par les voyageurs
  favorites    Favorite[]                                // Utilisateurs ayant mis ce logement en favori

  createdAt    DateTime     @default(now())              // Date de cr√©ation
  updatedAt    DateTime     @updatedAt                   // Mise √† jour automatique
}

// üñºÔ∏è Photo associ√©e √† un logement
model Photo {
  id         String   @id @default(cuid())               // Identifiant unique de la photo
  url        String                                    // URL de l'image h√©berg√©e
  listing    Listing  @relation(fields: [listingId], references: [id]) // Logement concern√©
  listingId  String
}

// üìÖ P√©riode pendant laquelle un logement est disponible √† la r√©servation
model Availability {
  id         String   @id @default(cuid())               // ID unique
  listing    Listing  @relation(fields: [listingId], references: [id]) // Logement concern√©
  listingId  String
  startDate  DateTime                                  // D√©but de la p√©riode disponible
  endDate    DateTime                                  // Fin de la p√©riode disponible
}

// üß≥ R√©servation effectu√©e par un utilisateur
model Booking {
  id          String   @id @default(cuid())              // ID unique
  listing     Listing  @relation(fields: [listingId], references: [id]) // Logement r√©serv√©
  listingId   String
  user        User     @relation(fields: [userId], references: [id])   // Utilisateur ayant r√©serv√©
  userId      String
  startDate   DateTime                                 // D√©but du s√©jour
  endDate     DateTime                                 // Fin du s√©jour
  totalPrice  Float                                    // Prix total de la r√©servation
  createdAt   DateTime  @default(now())                // Date de cr√©ation de la r√©servation
}

// ‚≠ê Avis post√© par un utilisateur apr√®s un s√©jour
model Review {
  id          String   @id @default(cuid())              // ID de l'avis
  rating      Int                                      // Note (de 1 √† 5)
  comment     String?                                  // Commentaire (optionnel)
  listing     Listing  @relation(fields: [listingId], references: [id]) // Logement √©valu√©
  listingId   String
  user        User     @relation(fields: [userId], references: [id])   // Auteur de l'avis
  userId      String
  createdAt   DateTime @default(now())                 // Date de publication
}

// üí¨ Message priv√© entre deux utilisateurs
model Message {
  id          String   @id @default(cuid())              // ID du message
  sender      User     @relation("MessagesSent", fields: [senderId], references: [id]) // Exp√©diteur
  senderId    String
  receiver    User     @relation("MessagesReceived", fields: [receiverId], references: [id]) // Destinataire
  receiverId  String
  content     String                                   // Texte du message
  sentAt      DateTime  @default(now())                // Date d'envoi
}

// ‚ù§Ô∏è Syst√®me de favoris (logement ajout√© par un utilisateur)
model Favorite {
  id         String   @id @default(cuid())               // ID unique
  user       User     @relation(fields: [userId], references: [id])   // L'utilisateur
  userId     String
  listing    Listing  @relation(fields: [listingId], references: [id])// Le logement
  listingId  String
  createdAt  DateTime @default(now())                   // Date d‚Äôajout en favori
}

// üîî Notification utilisateur (nouveau message, rappel, etc.)
model Notification {
  id         String   @id @default(cuid())               // ID de la notification
  user       User     @relation(fields: [userId], references: [id]) // Utilisateur cibl√©
  userId     String
  message    String                                   // Contenu de la notification
  read       Boolean  @default(false)                 // Marqu√©e comme lue ou non
  createdAt  DateTime @default(now())                 // Date d‚Äôenvoi
}

// ‚úÖ V√©rification d‚Äôidentit√© de l‚Äôutilisateur (documents)
model Verification {
  id         String   @id @default(cuid())               // ID unique
  user       User     @relation(fields: [userId], references: [id]) // Utilisateur concern√©
  userId     String   @unique                         // Un seul enregistrement par utilisateur
  isVerified Boolean  @default(false)                 // Statut de la v√©rification
  docUrl     String?                                 // Lien vers le document d‚Äôidentit√©
  createdAt  DateTime @default(now())                // Date d‚Äôenregistrement
}
